#ifndef _CURVE2D_
#define _CURVE2D_

#include <FL/Fl.H>
#include <FL/fl_draw.H>

#include "point2d.h"
#include "graphicobject.h"

#include <vector>
#include <string>
#include <limits>

#include "RealVector.h"

#define CURVE2D_SOLID_LINE 1
#define CURVE2D_MARKERS    2
#define CURVE2D_INDICES    4

class Curve2D : public GraphicObject {
    private:
    protected:
        vector<Point2D> vp;
        std::vector<std::string> str;

        int type_;        
        int style_;
        void transform(const double *matrix);
    public:
        Curve2D(const RealVector &, double, double, double, int = CURVE2D_MARKERS);
        Curve2D(const vector<RealVector> &, double, double, double, int = CURVE2D_SOLID_LINE);
        Curve2D(const vector<RealVector> &, double, double, double, const std::vector<std::string> &strorg, int = CURVE2D_SOLID_LINE);

        Curve2D(const vector<Point2D> &, double, double, double, int = CURVE2D_SOLID_LINE);
        Curve2D(const vector<Point2D> &, double, double, double, const std::vector<std::string> &strorg, int = CURVE2D_SOLID_LINE);
        virtual ~Curve2D();
        void draw();
        void minmax(Point2D &, Point2D &);
        void pstricks(ofstream *);
        void type(int t){type_ = t; draw(); return;}
        int type(void){return type_;}
        void style(int s){style_ = s;}


};

#endif // _CURVE2D_

